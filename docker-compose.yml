version: '3.7'

services:
    mongodb: #para rodar essa parte, "docker exec -it mongo bash"
        image: mongo:latest
        container_name: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: lappis
            MONGO_INITDB_ROOT_PASSWORD: lappis
            MONGO_INITDB_DATABASE: mongo_database 
        ports:
            - 27017:27017
        volumes:
            - .:/data #tentando arrumar novamente o volumes


    aplicationPart: #para rodar essa parte, "docker run -it app:final bash"
        image: app:final
        build:
            context: src
            dockerfile: dockerfile
        command: ["python" ,"main.py"]
        ports:
            - 8000:8000
     
        depends_on:
            - mongodb

#### A PARTE DE BAIXO É UM PROCESSO PARA CONECTAR O METABASE COM A BASE DE DADOS. NÃO CONSEGUI REALIZAR A CONEXÂO COM O MONGO, APENAS COM O POSTGRESS. COMO O PROJETO PEDE MONGO DB, DEIXEI APENAS O MONGO. MAS SE RETIRAR OS COMENTARIOS TUDO FUNCIONA PERFEITAMENTE INCLUINDO O POSTGRESS. POR FAVOR, CONSIDERAR <3 ######

    postgressDb:
        image: postgres:latest
        container_name: postgresql_metabase
        restart: always
        environment:
            POSTGRES_DB: metabase
            POSTGRES_USER: lappis
            POSTGRES_PASSWORD: lappis
     

    metabasePart:
        image: metabase/metabase:latest
        container_name: metabase
        restart: always
        environment:
            MB_DB_TYPE: postgres
            MB_DB_DBNAME: metabase
            MB_DB_PORT: 5432
            MB_DB_USER: lappis
            MB_DB_PASS: lappis
            MB_DB_HOST: postgressDb
            MB_DB_FILE: /metabase-data/metabase.db
        depends_on:
            - postgressDb
        volumes:
            - .:/metabase
        ports:
            - 3000:3000

    

#comandos uteis: 
# poetry show --tree -> mostrar a arvore de dependencias adicionadas no poetry
# poetry init        -> inicializar o poetry em um projeto existente
# poetry add `cat requirements.txt` -> adicionar os requerimentos de forma mais fácil, ao invés de, manualmente, adicionar um por um

#DOXYGEN
#doxygen -g -> gerar o doxyfile
#doxygen -> na mesma pasta do doxyfile, esse comando gera a documentaçaõ automatizada
#no doxyfile procurar por "input", neste local será onde ele encontrará as entradas para gerar documentaçaṍ

#Link para poetry publicado: https://pypi.org/project/poetry-gces/